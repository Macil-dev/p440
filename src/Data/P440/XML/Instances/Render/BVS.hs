{-#LANGUAGE OverloadedStrings#-}
module Data.P440.XML.Instances.Render.BVS where

import qualified Data.P440.Domain.BVS as BVS
import Data.P440.Domain.ComplexTypes

import Data.P440.XML.Render
import qualified Data.P440.XML.Instances.Render.ComplexTypes as C

instance ToNode BVS.Файл where
    toNode (BVS.Файл идЭС типИнф версПрог телОтпр
                     должнОтпр фамОтпр версФорм
                     выпбноснов) =
        complex "Файл"
                ["ИдЭС"      =: идЭС
                ,"ТипИнф"    =: типИнф
                ,"ВерсПрог"  =: версПрог
                ,"ТелОтпр"   =: телОтпр
                ,"ДолжнОтпр" =: должнОтпр
                ,"ФамОтпр"   =: фамОтпр
                ,"ВерсФорм"  =: версФорм
                ]
                [Sequence [выпбноснов]]

instance ToNode BVS.ВЫПБНОСНОВ where
    toNode (BVS.ВЫПБНОСНОВ номВыпис типВыпис номЗапр датаПодпЗР
                           датаПол колДопФ датаПодп свНО
                           банкИлиУБР плЮЛИлиПлИПИлиПФЛ сведения отсутствуют
                           предБанка) =
        complex "ВЫПБНОСНОВ"
                ["НомВыпис"     =: номВыпис  
                ,"ТипВыпис"     =: типВыпис  
                ,"НомЗапр"      =: номЗапр   
                ,"ДатаПодпЗапр" =: датаПодпЗР
                ,"ДатаПол"      =: датаПол   
                ,"КолДопФ"      =: колДопФ   
                ,"ДатаПодп"     =: датаПодп]
                [Sequence [C.свНО "СвНО" свНО]
                ,Sequence [банкИлиУБР]
                ,Sequence [плЮЛИлиПлИПИлиПФЛ]
                ,Sequence сведения
                ,Sequence отсутствуют
                ,Sequence [C.предБ "ПредБанка" предБанка]]

instance ToNode BVS.ПлЮЛИлиПлИПИлиПлФЛ where
    toNode (BVS.ПлЮЛ' плЮЛ) = C.плЮЛ "ПлЮЛ" плЮЛ
    toNode (BVS.ПлИП' плИП) = C.плИП "ПлИП" плИП
    toNode (BVS.ПлФЛ' плФЛ) = C.плФЛ "ПлФЛ" плФЛ

instance ToNode BVS.СвБанкИлиСвУБР where
    toNode (BVS.СвБанк банк) = C.банк "СвБанк" банк
    toNode (BVS.СвУБР  убр)  = C.убр  "СвУБР"  убр

instance ToNode BVS.НаДатуИлиВПериод where
    toNode (BVS.НаДату дейстПоСост) =
        complex_ "НаДату"
                 ["ДейстПоСост" =: дейстПоСост]
    toNode (BVS.ВПериод датаНач датаКон) =
        complex_ "ВПериод"
                 ["ДатаНач" =: датаНач
                 ,"ДатаКон" =: датаКон]

instance ToNode BVS.ВладСч where
    toNode (BVS.ВладСчУказЛицо' счЛица) =
        complex "ВладСч"
                []
                [Sequence [complex_ "УказЛицо"
                                    ["СчЛица" =: счЛица]]]
    toNode (BVS.ВладСчИноеЛицо' иноеЛицо) =
        complex "ВладСч"
                []
                [Sequence [иноеЛицо]]

instance ToNode BVS.Бенефициар where
    toNode (BVS.БенефициарУказЛицо' счЛица) =
        complex "Бенефициар"
                []
                [Sequence [complex_ "УказЛицо"
                                    ["СчЛица" =: счЛица]]]
    toNode (BVS.БенефициарИноеЛицо' иноеЛицо) =
        complex "Бенефициар"
                []
                [Sequence [иноеЛицо]]

instance ToNode BVS.ИноеЛицо where
    toNode (BVS.ИноеЛицоПлЮЛ плюл) =
        complex "ИноеЛицо"
                []
                [Sequence [C.плЮЛ "ПлЮЛ" плюл]]
    toNode (BVS.ИноеЛицоПлИП плип) =
        complex "ИноеЛицо"
                []
                [Sequence [C.плИП "ПлИП" плип]]
    toNode (BVS.ИноеЛицоПФЛ пфл) =
        complex "ИноеЛицо"
                []
                [Sequence [C.пфл  "ПлЮЛ" пфл]]

instance ToNode BVS.ИзмСч where
    toNode (BVS.ИзмСч номДоИзм номПоИзм датаИзм) =
        complex_ "ИзмСч"
                 ["НомДоИзм" =: номДоИзм
                 ,"НомПоИзм" =: номПоИзм
                 ,"ДатаИзм"  =: датаИзм]

instance ToNode BVS.СвСчет where
    toNode (BVS.СвСчет порНомСчет номСч видСч датаОткрСчет
                       датаЗакрСчет кодВалСчет датаНачСчет датаКонСчет
                       остатНачСчет суммаДебСчет суммаКредСчет остатКонСчет
                       владСч бенефициар измСч) =
        complex "СвСчет"
                ["ПорНом"    =: порНомСчет
                ,"НомСч"     =: номСч
                ,"ВидСч"     =: видСч
                ,"ДатаОткр"  =: датаОткрСчет
                ,"ДатаЗакр"  =: датаЗакрСчет
                ,"КодВал"    =: кодВалСчет
                ,"ДатаНач"   =: датаНачСчет
                ,"ДатаКон"   =: датаКонСчет
                ,"ОстатНач"  =: остатНачСчет
                ,"СуммаДеб"  =: суммаДебСчет
                ,"СуммаКред" =: суммаКредСчет
                ,"ОстатКон"  =: остатКонСчет]
                [Sequence владСч
                ,Sequence бенефициар
                ,Sequence измСч]

instance ToNode BVS.ИзмВкл where
    toNode (BVS.ИзмВкл номДоИзм номПоИзм датаИзм) =
        complex_ "ИзмВкл"
                 ["НомДоИзм" =: номДоИзм
                 ,"НомПоИзм" =: номПоИзм
                 ,"ДатаИзм"  =: датаИзм]

instance ToNode BVS.СвВклад where
    toNode (BVS.СвВклад  порНомВклад  номВкл видВкл датаОткрВклад
                         датаИстВклад датаЗакрВклад кодВалВклад датаНачВклад
                         датаКонВклад остатНачВклад суммаДебВклад суммаКредВклад
                         остатКонВклад измВкл) =
        complex "СвВклад"
                ["ПорНом"    =: порНомВклад
                ,"НомВкл"    =: номВкл
                ,"ВидВкл"    =: видВкл
                ,"ДатаОткр"  =: датаОткрВклад
                ,"ДатаИст"   =: датаИстВклад
                ,"ДатаЗакр"  =: датаЗакрВклад
                ,"КодВал"    =: кодВалВклад
                ,"ДатаНач"   =: датаНачВклад
                ,"ДатаКон"   =: датаКонВклад
                ,"ОстатНач"  =: остатНачВклад
                ,"СуммаДеб"  =: суммаДебВклад
                ,"СуммаКред" =: суммаКредВклад
                ,"ОстатКон"  =: остатКонВклад]
                [Sequence измВкл]

instance ToNode BVS.ИзмЭДС where
    toNode (BVS.ИзмЭДС номДоИзм номПоИзм датаИзм) =
        complex_ "ИзмЭДС"
                 ["НомДоИзм" =: номДоИзм
                 ,"НомПоИзм" =: номПоИзм
                 ,"ДатаИзм"  =: датаИзм]

instance ToNode BVS.СвЭДС where
    toNode (BVS.СвЭДС  порНомЭДС идЭСП датаОткрЭДС датаЗакрЭДС
                       кодВалЭДС датаНачЭДС датаКонЭДС остатНачЭДС
                       суммаДебЭДС суммаКредЭДС остатКонЭДС измЭДС) =
        complex "СвЭДС"
                ["ПорНом"    =: порНомЭДС
                ,"ИдЭСП"     =: идЭСП
                ,"ДатаОткр"  =: датаОткрЭДС
                ,"ДатаЗакр"  =: датаЗакрЭДС
                ,"КодВал"    =: кодВалЭДС
                ,"ДатаНач"   =: датаНачЭДС
                ,"ДатаКон"   =: датаКонЭДС
                ,"ОстатНач"  =: остатНачЭДС 
                ,"СуммаДеб"  =: суммаДебЭДС 
                ,"СуммаКред" =: суммаКредЭДС
                ,"ОстатКон"  =: остатКонЭДС]
                [Sequence измЭДС]

instance ToNode BVS.Сведения where
    toNode (BVS.Сведения наДатуИлиВПериод (BVS.СвСчет' свСчет)) =
        complex "Сведения"
                []
                [Sequence [наДатуИлиВПериод]
                ,Sequence свСчет]
    toNode (BVS.Сведения наДатуИлиВПериод (BVS.СвВклад' свВклад)) =
        complex "Сведения"
                []
                [Sequence [наДатуИлиВПериод]
                ,Sequence свВклад]
    toNode (BVS.Сведения наДатуИлиВПериод (BVS.СвЭДС' свЭДС)) =
        complex "Сведения"
                []
                [Sequence [наДатуИлиВПериод]
                ,Sequence свЭДС]

instance ToNode BVS.СледСчета where
    toNode (BVS.СледСчета номСчСледСчета владСчСледСчета) =
         complex "СледСчета"
                 ["НомСч" =: номСчСледСчета]
                 [Sequence владСчСледСчета]

instance ToNode BVS.Отсутствуют where
    toNode (BVS.Отсутствуют наДатуИлиВПериод (BVS.ВсеСчета' призОтс)) =
        complex "Отсутствуют"
                []
                [Sequence [наДатуИлиВПериод]
                ,Sequence [complex_ "ВсеСчета" ["ПризОтс" =: призОтс]]]
    toNode (BVS.Отсутствуют наДатуИлиВПериод (BVS.СледСчета' следСчета)) =
        complex "Отсутствуют"
                []
                [Sequence [наДатуИлиВПериод]
                ,Sequence следСчета]
