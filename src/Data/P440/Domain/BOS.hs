module Data.P440.Domain.BOS where

import Data.P440.Domain.SimpleTypes
import Data.P440.Domain.ComplexTypes

import Data.Text (Text)

-- 2.13 Справка об остатках

data Файл = Файл {
     идЭС        :: GUID
    ,типИнф      :: Text
    ,версПрог    :: Text
    ,телОтпр     :: Text
    ,должнОтпр   :: Text
    ,фамОтпр     :: Text
    ,версФорм    :: Text
    ,спрбноостат :: СПРБНООСТАТ
} deriving (Eq, Show)

data СПРБНООСТАТ = СПРБНООСТАТ {
     номСправ     :: Text
    ,типСправ     :: Text
    ,номЗР        :: Text
    ,идЗапр       :: Maybe ИдЗапр
    ,датаПодпЗР   :: Date
    ,датаПол      :: Date
    ,датаПодп     :: Date
    ,свНО         :: СвНО
    ,банкИлиУБР   :: СвБанкИлиСвУБР
    ,плЮлИлиПлИПИлиПФЛ :: ПлЮлИлиПлИПИлиПФЛ
    ,сведения     :: Maybe Сведения
    ,отсутствуют  :: Maybe Отсутствуют
    ,предБанка    :: ПредБ
} deriving (Eq, Show)

data ПлЮлИлиПлИПИлиПФЛ = ПлЮЛ' ПлЮЛ
                       | ПлИП' ПлИП
                       | ПФЛ'  ПФЛ
                       deriving (Eq, Show)

data СвБанкИлиСвУБР = СвБанк Банк
                    | СвУБР УБР
                    deriving (Eq, Show)

data НаДатуИлиВПериод = НаДату Date
                      | ВПериод Date Date
                      deriving (Eq, Show)

data ВладСч = ВладСчУказЛицо' Text
            | ВладСчИноеЛицо' ИноеЛицо
            deriving (Eq, Show)

data Бенефициар = БенефициарУказЛицо' Text
                | БенефициарИноеЛицо' ИноеЛицо
                deriving (Eq, Show)

data ИноеЛицо = ИноеЛицоПлЮЛ ПлЮЛ
              | ИноеЛицоПлИП ПлИП
              | ИноеЛицоПФЛ  ПФЛ
              deriving (Eq, Show)

data ИзмСч = ИзмСч {
     номДоИзмСчет :: Text
    ,номПоИзмСчет :: Text
    ,датаИзмСчет  :: Date
} deriving (Eq, Show)

data ОстСчет = ОстСчет {
     номСч        :: Text
    ,видСч        :: Text
    ,датаОткрСчет :: Date
    ,датаЗакрСчет :: Maybe Date
    ,кодВалСчет   :: Text
    ,остатокСчет  :: Text
    ,датаОстСчет  :: Date
    ,владСч       :: Maybe ВладСч
    ,бенефициар   :: [Бенефициар]
    ,измСч        :: [ИзмСч]
} deriving (Eq, Show)

data ИзмВкл = ИзмВкл {
     номДоИзмВклад :: Text
    ,номПоИзмВклад :: Text
    ,датаИзмВклад  :: Date
} deriving (Eq, Show)

data ОстВклад = ОстВклад {
     номВкл        :: Text
    ,видВкл        :: Text
    ,датаОткрВклад :: Date
    ,датаИстВклад  :: Maybe Date
    ,датаЗакрВклад :: Maybe Date
    ,кодВалВклад   :: Text
    ,остатокВклад  :: Text
    ,датаОстВклад  :: Date
    ,измВкл        :: [ИзмВкл]
} deriving (Eq, Show)

data ИзмЭДС = ИзмЭДС {
     номДоИзмЭДС :: Text
    ,номПоИзмЭДС :: Text
    ,датаИзмЭДС  :: Date
} deriving (Eq, Show)

data ОстЭДС = ОстЭДС {
     идЭСП       :: Text
    ,датаОткрЭДС :: Date
    ,датаЗакрЭДС :: Maybe Date
    ,кодВалЭДС   :: Text
    ,остатокЭДС  :: Text
    ,датаОстЭДС  :: Date
    ,измЭДС      :: [ИзмЭДС]
} deriving (Eq, Show)

data ОстСчетИлиОстВкладИлиОстЭДС = ОстСчет'  [ОстСчет]
                                 | ОстВклад' [ОстВклад]
                                 | ОстЭДС'   [ОстЭДС]
                                 deriving (Eq, Show)

data Сведения = Сведения {
     наДатуИлиВПериод :: НаДатуИлиВПериод
    ,остСчИлиОстВкладИлиОстЭДС :: ОстСчетИлиОстВкладИлиОстЭДС
} deriving (Eq, Show)

data СледСчета = СледСчета {
     номСчСледСчета  :: Text
    ,владСчСледСчета :: Maybe ВладСч
} deriving (Eq, Show)

data ВсеСчетаИлиСледСчета = ВсеСчета' Text
                          | СледСчета' [СледСчета]
                          deriving (Eq, Show)

data Отсутствуют = Отсутствуют {
     остутствуютНаДатуИлиВПериод     :: НаДатуИлиВПериод
    ,отсутствуютВсеСчетаИлиСледСчета :: ВсеСчетаИлиСледСчета
} deriving (Eq, Show)
